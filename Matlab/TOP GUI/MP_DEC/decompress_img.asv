function [Varname] = decompress_img (varargin)
%%
% decompress_img (InArg)
%
% Input parameters:
%       InArg - Compressed variable to be decompressed
%
% Output parameters:
%       ImageName - Decompressed image (matlab format)
%
% Description:
% The function decompress an image, into a 3D matlab matrix
    
    %% Validate input arguments 
    if nargin ~= 2
        error('Please enter a compressed variable name, and its size');
    end
    
    %% Extract data from compressed image
    cmpImg = varargin{1};
    cmpImgSize = numel(cmpImg(:,1,1)); %% Number of data rows
    
    %% Decompress image
    decImgSize = max([sum(varargin{1}(:,2,1)), sum(varargin{1}(:,2,2)), sum(varargin{1}(:,2,3))]); % Decompress image size
    img = zeros(decImgSize,1,3,'uint8');
    pos = [1 1 1];
    
    for cnt = 1:cmpImgSize
        %Decompress image
        img(pos(1):(pos(1)+cmpImg(cnt,2,1) - 1),1) = repmat(cmpImg(cnt,1,1), cmpImg(cnt,2,1),1); % Decompress image R
        img(pos(2):(pos(2)+cmpImg(cnt,2,2) - 1),2) = repmat(cmpImg(cnt,1,2), cmpImg(cnt,2,2),1); % Decompress image G
        img(pos(3):(pos(3)+cmpImg(cnt,2,3) - 1),3) = repmat(cmpImg(cnt,1,3), cmpImg(cnt,2,3),1); % Decompress image B
        pos(1) = pos(1) + cmpImg(cnt,2,1);
        pos(2) = pos(2) + cmpImg(cnt,2,2);
        pos(3) = pos(3) + cmpImg(cnt,2,3);
    end
    
    %Varname=zeros(varargin{2}(2), varargin{2}(1),3);
    Varname= reshape(img, varargin{2}(2), varargin{2}(1),3);
end